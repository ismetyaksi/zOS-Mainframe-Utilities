//IBMUSER1 JOB (ACT1,1),'IBMUSER',MSGCLASS=X,
//            NOTIFY=&SYSUID
//*
//* BATCH REXX RACF MIGRATION PROGRAM 2
//*
//* 1. CREATE RDEFINE RACF COMMANDS FROM TSS ACIDS LIST
//* 2. CREATE PERMIT  RACF COMMANDS FROM RESOURCE  LIST
//*
//STEP1    EXEC PGM=ICEGENER
//SYSIN    DD DUMMY
//SYSPRINT DD SYSOUT=*
//SYSUT2   DD UNIT=SYSALLDA,DSN=&&SYSEXEC(MYREXX),  ===
//           DISP=(MOD,PASS),SPACE=(CYL,(1,1,10)),
//           DCB=(SYS1.MACLIB,BLKSIZE=0)
//SYSUT1   DD *
 /* BATCH REXX                                                   */

 DELIM = ';'

 /* TSS CLASS LIST FROM TSS LISTING                              */

 TSS_LIST = ' ABSTRACT ACID ADASEC ALCSAUTH APPL CASECAUT '
 TSS_LIST = TSS_LIST ' CPU DATASET EJBROLE IBMFAC JESJOBS '
 TSS_LIST = TSS_LIST ' JESSPOOL LOGSTRM MODE MQADMIN MQCMDS '
 TSS_LIST = TSS_LIST ' MQCONN MQNLIST MQPROC MQQUEUE '
 TSS_LIST = TSS_LIST ' OPERCMDS OTRAN PROGRAM PTKTDATA '
 TSS_LIST = TSS_LIST ' SDB SDL SDP SDSF SERVAUTH SERVER SPI '
 TSS_LIST = TSS_LIST ' SURROGAT TERMINAL TSOACCT TSOAUTH '
 TSS_LIST = TSS_LIST ' TSOPROC VIRTAPPL VIRTNODE VOLUME WBEM '
 TSS_LIST = TSS_LIST ' ZMFAPLA '

 TSS_ONLY = 'ABSTRACT CASECAUT CPU MODE'

 REDESIGN = 'ACID JESJOBS JESSPOOL SURROGAT OTRAN VOLUME'

 /* PART 1 * PART 1 * PART 1 * PART 1 * PART 1 * PART 1 * PART 1 */

 'EXECIO 1 DISKR FILEIN1 (STEM LINEIN1.'

 DO WHILE RC = 0

   PARM_RESOURCE = SUBSTR(LINEIN1.1, 2)
   PARM_RESOURCE = TRANSLATE(PARM_RESOURCE, ' ', ',') /* COMMA TO SPC */
   CALL PARSE_RESOURCE_LINE

   SELECT
     WHEN LINEIN1.1 = '' THEN                /*  SKIP BLANK LINE */
       NOP
     WHEN POS(STEM_RESOURCE.1, TSS_ONLY) <> 0 THEN
       DO
         MSG1 = ' RESOURCE' STEM_RESOURCE.1 STEM_RESOURCE.3
         MSG1 = MSG1 'NO RACF EQUIVALENT. WILL NOT BE DEFINED'
         SAY MSG1
       END
     WHEN POS(STEM_RESOURCE.1, REDESIGN) <> 0 THEN
       DO
         MSG1 = ' RESOURCE' STEM_RESOURCE.1
         MSG1 = MSG1 'TO BE REDESIGNED IF UTILIZED'
         SAY MSG1
       END
     WHEN POS(' 'STEM_RESOURCE.1' ', TSS_LIST) <> 0 THEN
       DO                                    /* RESOURCE IN LIST */
         IF STEM_RESOURCE.1 = 'DATASET' THEN
           CALL PREP_ADDSD
         ELSE
           CALL PREP_RDEFINE
       END
     WHEN SUBSTR(LINEIN1.1, 1, 13) = 'ACCESSORID = ' THEN
       DO
         TSS_OWNER = STEM_RESOURCE.3
       END
     OTHERWISE
       DO
         NOP
       END
   END /* SELECT */

   'EXECIO 1 DISKR FILEIN1 (STEM LINEIN1.'
 END /*  DO WHILE RC = 0  */

 /* PART 2 * PART 2 * PART 2 * PART 2 * PART 2 * PART 2 * PART 2 */

 'EXECIO 1 DISKR FILEIN2 (STEM LINEIN2.'   /* SKIP HEADER        */
 'EXECIO 1 DISKR FILEIN2 (STEM LINEIN2.'

 DO WHILE RC = 0      /* PREPARE PERMIT COMMANDS                 */
   INFO_PERMIT = LINEIN2.1
   CALL PARSE_PERMIT_INFO

   SELECT
     WHEN POS(STEM_PERMIT.1, TSS_ONLY) <> 0 THEN
       DO
         MSG1 = ' PERMIT' STEM_PERMIT.1
         MSG1 = MSG1 STEM_PERMIT.2 STEM_PERMIT.3 STEM_PERMIT.5
         MSG1 = MSG1 'NO RACF EQUIVALENT. WILL NOT BE DEFINED'
         SAY MSG1
       END
     WHEN POS(STEM_PERMIT.1, REDESIGN) <> 0 THEN
       DO
         MSG1 = ' PERMIT' STEM_PERMIT.1
         MSG1 = MSG1 STEM_PERMIT.2 STEM_PERMIT.3 STEM_PERMIT.5
         MSG1 = MSG1 'TO BE REDESIGNED IF UTILIZED'
         SAY MSG1
       END
     WHEN POS(' 'STEM_PERMIT.1' ', TSS_LIST) <> 0 THEN
       DO                                    /* PERMIT IN LIST */
         IF STEM_PERMIT.1 = 'IBMFAC' THEN
           RACF_CLASS = 'FACILITY'
         ELSE
           RACF_CLASS = STEM_PERMIT.1

         IF STEM_PERMIT.5 = '' THEN
           RACF_ACCESS = READ
         ELSE
           RACF_ACCESS = STEM_PERMIT.5

         IF RACF_CLASS = 'DATASET' THEN
           CALL PREP_PERMIT_DATASET
         ELSE
           CALL PREP_PERMIT_RESOURCE
       END
     OTHERWISE
       DO
         MSG1 = STEM_PERMIT.1 STEM_PERMIT.2 STEM_PERMIT.3 STEM_PERMIT.5
         MSG1 = MSG1 'SKIPPED'
         SAY MSG1
       END
   END /* SELECT */

   'EXECIO 1 DISKR FILEIN2 (STEM LINEIN2.'
 END /* DO WHILE RC = 0 */

 RETURN

 PARSE_RESOURCE_LINE:

   DO IX2 = 1 BY 1 WHILE PARM_RESOURCE <> ''
       PARSE VAR PARM_RESOURCE STEM_RESOURCE.IX2 PARM_RESOURCE
   END

   STEM_RESOURCE.0 = IX2 - 1

 RETURN

 PREP_ADDSD:
   DO IX1 = 3 TO STEM_RESOURCE.0
     SELECT
       WHEN RIGHT(STEM_RESOURCE.IX1, 3) = '.**' THEN
         HLQ1 = STEM_RESOURCE.IX1
       WHEN RIGHT(STEM_RESOURCE.IX1, 2) = '**' THEN
         HLQ1 = STEM_RESOURCE.IX1' <=== CORRECT ERROR OR DELETE'
       WHEN RIGHT(STEM_RESOURCE.IX1, 2) = '.*'  THEN
         HLQ1 = STEM_RESOURCE.IX1'*'
       WHEN RIGHT(STEM_RESOURCE.IX1, 1) = '*'  THEN
         HLQ1 = STEM_RESOURCE.IX1' <=== CORRECT ERROR OR DELETE'
       WHEN RIGHT(STEM_RESOURCE.IX1, 1) = '.'  THEN
         HLQ1 = STEM_RESOURCE.IX1'**'
       OTHERWISE
         HLQ1 = STEM_RESOURCE.IX1'.**'
     END /* SELECT */

     HLQ2 = "'"HLQ1"'"
     PARSE VAR HLQ1 HLQ1_GROUP'.'TMP1

     O_LINES.1 = ' DELDSD ('HLQ2')'
     O_LINES.0 = 1
     'EXECIO' O_LINES.0 'DISKW DELDSD1 (STEM O_LINES.'

     O_LINES.1 = ' DELGROUP ('HLQ1_GROUP')'
     O_LINES.0 = 1
     'EXECIO' O_LINES.0 'DISKW DELDSD1 (STEM O_LINES.'

     O_LINES.1 = ' ADDGROUP ('HLQ1_GROUP')'
     O_LINES.1 = O_LINES.1 'SUPGROUP('TSS_OWNER')'
     O_LINES.1 = O_LINES.1 'OWNER('TSS_OWNER')'
     O_LINES.0 = 1
     'EXECIO' O_LINES.0 'DISKW ADDSD1 (STEM O_LINES.'

     O_LINES.1 = ' ADDSD ('HLQ2') NOSET'
     O_LINES.1 = O_LINES.1 'OWNER('TSS_OWNER') UACC(NONE)'
     O_LINES.0 = 1
     'EXECIO' O_LINES.0 'DISKW ADDSD1 (STEM O_LINES.'

     O_LINES.1 = ' 'TSS_OWNER STEM_RESOURCE.1 HLQ2
     O_LINES.0 = 1
     'EXECIO' O_LINES.0 'DISKW ADDSD2 (STEM O_LINES.'
   END /* DO IX1 = 3 TO STEM_RESOURCE.0 */

 RETURN

 PREP_RDEFINE:
   DO IX1 = 3 TO STEM_RESOURCE.0

     IF STEM_RESOURCE.1 = 'IBMFAC' THEN
       RACF_CLASS = 'FACILITY'
     ELSE
       RACF_CLASS = STEM_RESOURCE.1

     O_LINES.1 = ' RDELETE' RACF_CLASS '('STEM_RESOURCE.IX1')'
     O_LINES.0 = 1
     'EXECIO' O_LINES.0 'DISKW RDELETE1 (STEM O_LINES.'

     O_LINES.1 = ' RDEFINE' RACF_CLASS '('STEM_RESOURCE.IX1')'
     O_LINES.1 = O_LINES.1 'OWNER('TSS_OWNER') UACC(NONE)'
     O_LINES.0 = 1
     'EXECIO' O_LINES.0 'DISKW RDEFINE1 (STEM O_LINES.'

     O_LINES.1 = ' 'TSS_OWNER RACF_CLASS STEM_RESOURCE.IX1
     O_LINES.0 = 1
     'EXECIO' O_LINES.0 'DISKW RDEFINE2 (STEM O_LINES.'
   END /* DO IX1 = 3 TO STEM_RESOURCE.0 */

 RETURN

 PREP_PERMIT_DATASET:
   IF RIGHT(STEM_PERMIT.2, 3) = '.**' THEN
     HLQ1 = STEM_PERMIT.2
   ELSE IF RIGHT(STEM_PERMIT.2, 2) = '**' THEN
     HLQ1 = STEM_PERMIT.2' <=== CORRECT ERROR OR DELETE'
   ELSE IF RIGHT(STEM_PERMIT.2, 2) = '.*' THEN
     HLQ1 = STEM_PERMIT.2'*'
   ELSE IF RIGHT(STEM_PERMIT.2, 1) = '*' THEN
     HLQ1 = STEM_PERMIT.2' <=== CORRECT ERROR OR DELETE'
   ELSE IF RIGHT(STEM_PERMIT.2, 1) = '.' THEN
     HLQ1 = STEM_PERMIT.2'**'
   ELSE
     HLQ1 = STEM_PERMIT.2'.**'

   HLQ2 = "'"HLQ1"'"
   PARSE VAR HLQ1 HLQ1_GROUP'.'TMP1

   O_LINES.1 = ' PERMIT' HLQ2
   O_LINES.1 = O_LINES.1 'ID('STEM_PERMIT.4')'
   O_LINES.1 = O_LINES.1 'ACCESS('RACF_ACCESS')'
   O_LINES.0 = 1
   'EXECIO' O_LINES.0 'DISKW PERMIT1 (STEM O_LINES.'

 RETURN

 PREP_PERMIT_RESOURCE:
   O_LINES.1 = ' PERMIT' STEM_PERMIT.2 'CLASS('RACF_CLASS')'
   O_LINES.1 = O_LINES.1 'ID('STEM_PERMIT.4')'
   O_LINES.1 = O_LINES.1 'ACCESS('RACF_ACCESS')'
   O_LINES.0 = 1
   'EXECIO' O_LINES.0 'DISKW PERMIT2 (STEM O_LINES.'

 RETURN

 PARSE_PERMIT_INFO:

   DO IX1 = 1 BY 1 WHILE INFO_PERMIT <> ''
     PARSE VAR INFO_PERMIT STEM_PERMIT.IX1 (DELIM) INFO_PERMIT
   END

   STEM_PERMIT.0 = IX1 - 1

 RETURN
 RETURN

//*
//* EXECUTE REXX PROGRAM
//*
//STEP3    EXEC PGM=IRXJCL,PARM='MYREXX'            ===
//SYSEXEC  DD DISP=(OLD,PASS),DSN=&&SYSEXEC
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DUMMY
//FILEIN1  DD DISP=SHR,DSN=HLSYS.RACFMIG.TSSLIST      ===
//FILEIN2  DD DISP=SHR,DSN=HLSYS.RACFMIG.CSV(RESOURC1)       ===
//DELDSD1  DD DISP=SHR,DSN=HLSYS.RACFMIG.TSOCMD(DELDSD1),
//           UNIT=SYSALLDA,VOL=SER=S23CAT
//ADDSD1   DD DISP=SHR,DSN=HLSYS.RACFMIG.TSOCMD(ADDSD),
//           UNIT=SYSALLDA,VOL=SER=S23CAT
//ADDSD2   DD SYSOUT=*,
//           DCB=(RECFM=VB,LRECL=255,BLKSIZE=0)
//RDELETE1 DD DISP=SHR,DSN=HLSYS.RACFMIG.TSOCMD(RDELETE1),
//           UNIT=SYSALLDA,VOL=SER=S23CAT
//RDEFINE1 DD DISP=SHR,DSN=HLSYS.RACFMIG.TSOCMD(RDEFINE1),
//           UNIT=SYSALLDA,VOL=SER=S23CAT
//RDEFINE2 DD SYSOUT=*,
//           DCB=(RECFM=VB,LRECL=255,BLKSIZE=0)
//PERMIT1  DD DISP=SHR,DSN=HLSYS.RACFMIG.TSOCMD(PERMIT1),
//           UNIT=SYSALLDA,VOL=SER=S23CAT
//PERMIT2  DD DISP=SHR,DSN=HLSYS.RACFMIG.TSOCMD(PERMIT2),
//           UNIT=SYSALLDA,VOL=SER=S23CAT
//
